/**
 * Hack to transform the HTML structure of the pagination generated by Datatable, 
 * so it fits with the structure waited by Bootstrap.
 * oPagination.full_numbers is overriden.
 */

$.fn.dataTableExt.oPagination.full_numbers = {
	"fnInit": function ( oSettings, nPaging, fnCallbackDraw )	
	{
		var oLang = oSettings.oLanguage.oPaginate;
		var oClasses = oSettings.oClasses;
		var fnClickHandler = function ( e ) {
			if ( oSettings.oApi._fnPageChange( oSettings, e.data.action ) )
			{
				fnCallbackDraw( oSettings );
			}
		};
	
		$(nPaging).append(
			'<ul>'+
			'<li><a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageFirst+'">'+oLang.sFirst+'</a></li>'+
			'<li><a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPagePrevious+'">'+oLang.sPrevious+'</a></li>'+
			'<span></span>'+
			'<li><a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageNext+'">'+oLang.sNext+'</a></li>'+
			'<li><a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageLast+'">'+oLang.sLast+'</a></li>'+
			'</ul>'
		);
		var els = $('a', nPaging);
		var nFirst = els[0],
			nPrev = els[1],
			nNext = els[2],
			nLast = els[3];
		
		oSettings.oApi._fnBindAction( nFirst, {action: "first"},    fnClickHandler );
		oSettings.oApi._fnBindAction( nPrev,  {action: "previous"}, fnClickHandler );
		oSettings.oApi._fnBindAction( nNext,  {action: "next"},     fnClickHandler );
		oSettings.oApi._fnBindAction( nLast,  {action: "last"},     fnClickHandler );
		
		/* ID the first elements only */
		if ( !oSettings.aanFeatures.p )
		{
			nPaging.id = oSettings.sTableId+'_paginate';
			nFirst.id =oSettings.sTableId+'_first';
			nPrev.id =oSettings.sTableId+'_previous';
			nNext.id =oSettings.sTableId+'_next';
			nLast.id =oSettings.sTableId+'_last';
		}
	},
	"fnUpdate": function ( oSettings, fnCallbackDraw )
	{
		if ( !oSettings.aanFeatures.p )
		{
			return;
		}
		
		var iPageCount = $.fn.dataTableExt.oPagination.iFullNumbersShowPages;
		var iPageCountHalf = Math.floor(iPageCount / 2);
		var iPages = Math.ceil((oSettings.fnRecordsDisplay()) / oSettings._iDisplayLength);
		var iCurrentPage = Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;
		var sList = "";
		var iStartButton, iEndButton, i, iLen;
		var oClasses = oSettings.oClasses;
		var anButtons, anStatic, nPaginateList;
		var an = oSettings.aanFeatures.p;
		var fnBind = function (j) {
			oSettings.oApi._fnBindAction( this, {"page": j+iStartButton-1}, function(e) {
				/* Use the information in the element to jump to the required page */
				oSettings.oApi._fnPageChange( oSettings, e.data.page );
				fnCallbackDraw( oSettings );
				e.preventDefault();
			} );
		};
		
		/* Pages calculation */
		if ( oSettings._iDisplayLength === -1 )
		{
			iStartButton = 1;
			iEndButton = 1;
			iCurrentPage = 1;
		}
		else if (iPages < iPageCount)
		{
			iStartButton = 1;
			iEndButton = iPages;
		}
		else if (iCurrentPage <= iPageCountHalf)
		{
			iStartButton = 1;
			iEndButton = iPageCount;
		}
		else if (iCurrentPage >= (iPages - iPageCountHalf))
		{
			iStartButton = iPages - iPageCount + 1;
			iEndButton = iPages;
		}
		else
		{
			iStartButton = iCurrentPage - Math.ceil(iPageCount / 2) + 1;
			iEndButton = iStartButton + iPageCount - 1;
		}
	
		
		/* Build the dynamic list */
		for ( i=iStartButton ; i<=iEndButton ; i++ )
		{
			sList += (iCurrentPage !== i) ?
				'<li class="'+oClasses.sPageButton+'"><a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+'">'+oSettings.fnFormatNumber(i)+'</a></li>' :
				'<li class="'+oClasses.sPageButtonActive+'"><a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButtonActive+'">'+oSettings.fnFormatNumber(i)+'</a></li>';
		}
		
		/* Loop over each instance of the pager */
		for ( i=0, iLen=an.length ; i<iLen ; i++ )
		{
			if ( an[i].childNodes.length === 0 )
			{
				continue;
			}
			
			/* Build up the dynamic list forst - html and listeners */
			$('span:eq(0)', an[i])
				.html( sList )
				.find('a').each( fnBind );
			
			/* Update the premanent botton's classes */
			anButtons = an[i].getElementsByTagName('a');
			anStatic = [
				anButtons[0], anButtons[1], 
				anButtons[anButtons.length-2], anButtons[anButtons.length-1]
			];
	
			$(anStatic).removeClass( oClasses.sPageButton+" "+oClasses.sPageButtonActive+" "+oClasses.sPageButtonStaticDisabled );
			$([anStatic[0], anStatic[1]]).addClass( 
				(iCurrentPage==1) ?
					oClasses.sPageButtonStaticDisabled :
					oClasses.sPageButton
			);
			$([anStatic[2], anStatic[3]]).addClass(
				(iPages===0 || iCurrentPage===iPages || oSettings._iDisplayLength===-1) ?
					oClasses.sPageButtonStaticDisabled :
					oClasses.sPageButton
			);
		}
	}
}